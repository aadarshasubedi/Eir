TODO
- stock keyboard input in struct
- add system which set the correct input system for each player
  - if pad automatically set to player 1
  - if no pad, automatically set keyboard to player 1
  - add function which return input value independent of input type (keyboard or pad)
    - pass the input index
    - return float input value
    - it is the system who knows which system is linked to player from the index
    - pass the returned function to the process move static function in eir.c instead of passing
      eir_sys_env_t pointer.
- check validity move
- (MACRO) camera
- (MACRO) AI follow

DONE
+ use TestOpengl skeleton project move to C language
+ display two textured quads
+ create function to add sprite in sprite batch in main.c
+ move code that can be moved in dedicated file
+ splite code in core function and api function in main.c for all graphics tasks
+ move all graphics core and api functions in dedicated files
+ add timer for elapsed time
+ set batch as dynamic
+ move sprite 1 position in batch following elapsed time
+ see if update data buffer is needed (we need it !)
+ remove position change following time
+ add joypad init
+ get joypad axis move
+ move sprite position following elapsed time and joypad axis offset
+ get sound for test
+ call to sound load function before loop
+ play sound when moving
+ add sprite size parameter
+ add array macro
+ replace batch [] in gfx env with new array
+ add built attribute in batch struct
+ call to build batch in loop if built attribute is false
+ add modified attribute in batch struct
+ call to set buffer data in loop only if modified attribute is true
+ regression test on moving sprite with keyboard and/or joystick
+ add array for sound in snd env
+ add color parameter for sprite.
+ use it in shaders.
+ add eir_handle_t typedef (int) for all object creation interface with user
  + sprite
  + sprite batch
  + sound
+ review object creation interface (sprite, sprite batch, sound)
+ text display (see old code)
+ display frame duration
  + create update text method
  + calculate frame duration
  + display frame duration
+ display line
+ log pointers not free at the end of the program
  + create static list of allocation
  + add allocated pointer in the allocation
  + delete free pointer
  + display list at the end of the program
  + see if we must create a macro to have function/file/line etc.
+ display quad fill
+ add euler integration for acceleration/velocity moves
